{"version":3,"sources":["Api.ts","components/QuestionCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","QuestionCard","question","answer","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","answers","array","incorrect_answers","concat","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","gameover","setGameover","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","pre","answerObject","correctAnswer","prev","TOTAL_QUESTION","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c2876a5.chunk.js","sourcesContent":["\r\n\r\nexport type Question = {\r\n    category : string;\r\n    correct_answer : string;\r\n    difficulty : string;\r\n    incorrect_answers : string[];\r\n    question : string;\r\n    type : string;\r\n}\r\n\r\nexport enum Difficulty{\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionState =Question & {answers : string[]}\r\n\r\nconst shuffleArray = (array:any[])=>\r\n[...array].sort(()=> Math.random() - 0.5)\r\n\r\nexport const fetchQuizQuestions = async (amount:number,difficulty:Difficulty)=>{\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await(await (await fetch(endpoint)).json());\r\n    //console.log(data)\r\n    return data.results.map((question:Question)=>(\r\n        {\r\n            ...question,\r\n            answers : shuffleArray(question.incorrect_answers.concat(question.correct_answer))\r\n        }\r\n        ))\r\n}\r\n","import React from 'react';\r\nimport { AnswerObject } from './../App';\r\nimport './../App.css';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answer: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ \r\n    question,\r\n    answer,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <p className=\"number\">Question : {questionNr}/{totalQuestions}</p>\r\n            <h4 dangerouslySetInnerHTML={{__html:question}}/>\r\n            <div>\r\n                {answer.map(answer=>{\r\n                    return(<div>\r\n                        <button className=\"cardButton\" disabled={userAnswer?true:false} value={answer} onClick={callback}>\r\n                            <span dangerouslySetInnerHTML={{__html:answer}}/>\r\n                        </button>\r\n                    </div>)\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionCard;\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './Api';\nimport { type } from 'os';\n\nconst TOTAL_QUESTION = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n}\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameover, setGameover] = useState(true);\n\n//console.log(questions)\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameover(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTION, Difficulty.EASY)\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0);\n    setLoading(false);\n  }\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameover) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore(pre => pre + 1);\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswer((prev) => [...prev, answerObject]);\n\n    }\n  }\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTION) {\n      setGameover(true);\n    }\n    else {\n      setNumber(nextQ)\n    }\n  }\n  return (\n    <>\n      <h1>Quiz React App</h1>\n      {gameover || userAnswer.length === TOTAL_QUESTION ? (\n        <button className=\"start\" onClick={startTrivia}>Start</button>\n      ) : null}\n\n      {!gameover ? <h2 className=\"score\">Score : {score} </h2> : null}\n      {loading && <p>Loading Question..</p>}\n      {!loading && !gameover && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTION}\n          question={questions[number].question}\n          answer={questions[number].answers}\n          userAnswer={userAnswer ? userAnswer[number] : undefined}\n          callback={checkAnswer}\n        />)}\n      {!gameover && !loading && userAnswer.length === number + 1 && number !== TOTAL_QUESTION - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n      ) : null}\n    </>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}